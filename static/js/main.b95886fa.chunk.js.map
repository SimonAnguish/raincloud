{"version":3,"sources":["List.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["List","props","cardData","removeCard","cards","map","card","index","className","key","onClick","name","genus","species","watering","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","App","filter","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTA6BeA,G,MA1BF,SAAAC,GAAU,IACXC,EAAyBD,EAAzBC,SAAUC,EAAeF,EAAfE,WAEZC,EAAQF,EAASG,KAAI,SAACC,EAAMC,GAC9B,OACI,yBAAKC,UAAU,OAAOC,IAAKF,GACvB,yBAAKC,UAAU,eAGf,yBAAKA,UAAU,aACX,4BAAQA,UAAU,SAASE,QAAS,kBAAMP,EAAWI,KAArD,UACA,0BAAMC,UAAU,QAAQF,EAAKK,MAC7B,0BAAMH,UAAU,YAAYF,EAAKM,MAAjC,IAAyCN,EAAKO,SAC9C,0BAAML,UAAU,YAAhB,KAA8BF,EAAKQ,SAAnC,cAMhB,OACI,yBAAKN,UAAU,QACVJ,K,OCyCEW,G,iNA7DXC,aAAe,CACXL,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,SAAU,I,EAGdG,MAAQ,EAAKD,a,EAEbE,aAAe,SAAAC,GAAU,IAAD,EACIA,EAAMC,OAAtBT,EADY,EACZA,KAAMU,EADM,EACNA,MAEd,EAAKC,SAAL,eACKX,EAAOU,K,EAIhBE,WAAa,WACT,EAAKtB,MAAMuB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,wEAGb,IAAD,EACsCS,KAAKR,MAAxCN,EADH,EACGA,KAAMC,EADT,EACSA,MAAOC,EADhB,EACgBA,QAASC,EADzB,EACyBA,SAE9B,OACI,8BACI,2BAAOY,QAAQ,QAAf,QACA,2BACIC,KAAK,OACLhB,KAAK,OACLiB,GAAG,OACHP,MAAOV,EACPkB,SAAUJ,KAAKP,eACnB,2BAAOQ,QAAQ,SAAf,SACA,2BACIC,KAAK,OACLhB,KAAK,QACLiB,GAAG,QACHP,MAAOT,EACPiB,SAAUJ,KAAKP,eACnB,2BAAOQ,QAAQ,WAAf,WACA,2BACIC,KAAK,OACLhB,KAAK,UACLiB,GAAG,UACHP,MAAOR,EACPgB,SAAUJ,KAAKP,eACnB,2BAAOQ,QAAQ,YAAf,kBACA,2BACQC,KAAK,OACLhB,KAAK,WACLiB,GAAG,WACHP,MAAOP,EACPe,SAAUJ,KAAKP,eACvB,4BAAQS,KAAK,SAASN,MAAM,SAASX,QAASe,KAAKF,YAAnD,a,GAxDGO,cCmCJC,G,iNAhCXd,MAAQ,CACJb,MAAO,I,EAGXD,WAAa,SAAAI,GAAU,IACXH,EAAU,EAAKa,MAAfb,MAER,EAAKkB,SAAS,CACVlB,MAAOA,EAAM4B,QAAO,SAAC5B,EAAO6B,GACxB,OAAOA,IAAM1B,Q,EAKzBiB,aAAe,SAAAlB,GACX,EAAKgB,SAAS,CACVlB,MAAM,GAAD,mBAAM,EAAKa,MAAMb,OAAjB,CAAwBE,O,wEAI3B,IACEF,EAAUqB,KAAKR,MAAfb,MAER,OACI,yBAAKI,UAAU,OACX,kBAAC,EAAD,CAAMN,SAAUE,EAAOD,WAAYsB,KAAKtB,aACxC,kBAAC,EAAD,CAAMqB,aAAcC,KAAKD,oB,GA3BvBM,c,MCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b95886fa.chunk.js","sourcesContent":["import React from 'react'\nimport './List.scss'\n\nconst List = props => {\n    const { cardData, removeCard } = props\n\n    const cards = cardData.map((card, index) => {\n        return  (\n            <div className=\"card\" key={index}>\n                <div className=\"card-image\">\n\n                </div>\n                <div className=\"card-info\">\n                    <button className=\"delete\" onClick={() => removeCard(index)}>Delete</button>\n                    <span className=\"name\">{card.name}</span>\n                    <span className=\"binomial\">{card.genus} {card.species}</span>\n                    <span className=\"watering\">~ {card.watering} Days</span>\n                </div>\n            </div>\n        )\n    })\n\n    return (\n        <div className='list'>\n            {cards}\n        </div>\n    )\n}\n\nexport default List","import React, { Component } from 'react'\nimport './Form.scss'\n\nclass Form extends Component {\n    initialState = {\n        name: '',\n        genus: '',\n        species: '',\n        watering: '',\n    }\n\n    state = this.initialState\n\n    handleChange = event => {\n        const { name, value } = event.target\n\n        this.setState({\n            [name]: value,\n        })\n    }\n\n    submitForm = () => {\n        this.props.handleSubmit(this.state)\n        this.setState(this.initialState)\n    }\n\n    render() {\n        const { name, genus, species, watering } = this.state\n\n        return (\n            <form>\n                <label htmlFor=\"name\">Name</label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    id=\"name\"\n                    value={name}\n                    onChange={this.handleChange} />\n                <label htmlFor=\"genus\">Genus</label>\n                <input\n                    type=\"text\"\n                    name=\"genus\"\n                    id=\"genus\"\n                    value={genus}\n                    onChange={this.handleChange} />\n                <label htmlFor=\"species\">Species</label>\n                <input\n                    type=\"text\"\n                    name=\"species\"\n                    id=\"species\"\n                    value={species}\n                    onChange={this.handleChange} />\n                <label htmlFor=\"watering\">Water me every</label>\n                <input\n                        type=\"text\"\n                        name=\"watering\"\n                        id=\"watering\"\n                        value={watering}\n                        onChange={this.handleChange} />\n                <button type=\"submit\" value=\"Submit\" onClick={this.submitForm}>Save</button>\n            </form>\n        )\n    }\n}\n\nexport default Form","import React, { Component } from 'react'\nimport List from './List'\nimport Form from './Form'\nimport './App.scss'\n\nclass App extends Component {\n    state = {\n        cards: [],\n    }\n\n    removeCard = index => {\n        const { cards } = this.state\n\n        this.setState({\n            cards: cards.filter((cards, i) => {\n                return i !== index\n            }),\n        })\n    }\n\n    handleSubmit = card => {\n        this.setState({\n            cards: [...this.state.cards, card]\n        })\n    }\n\n    render() {\n        const { cards } = this.state\n\n        return (\n            <div className=\"App\">\n                <List cardData={cards} removeCard={this.removeCard} />\n                <Form handleSubmit={this.handleSubmit} />\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister();"],"sourceRoot":""}